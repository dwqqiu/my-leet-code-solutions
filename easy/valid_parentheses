// https://leetcode.com/problems/valid-parentheses/

// simple brute force approach
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(')
                stack.push(')');
            else if (c == '[')
                stack.push(']');
            else if (c == '{')
                stack.push('}');
            else {
                if (stack.isEmpty() || stack.pop() != c)
                    return false;
            }
        }
        
        return stack.isEmpty();
    }
}

// If using hardcoded character is a concern, use a hashmap for mappings
class Solution {
    public boolean isValid(String s) {
        HashMap<Character, Character> brackets_map = new HashMap<>(){{
            put(')', '(');
            put(']', '[');
            put('}', '{');
 
        }};
        Stack<Character> buffer = new Stack<>();
        for (char c : s.toCharArray()) {
            if (brackets_map.containsKey(c)) {
                if (buffer.isEmpty() || buffer.pop() != brackets_map.get(c))
                    return false;
            } else {
                buffer.push(c);
            }
        }
        return buffer.isEmpty();
    }
}

// References
// https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html
// https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html