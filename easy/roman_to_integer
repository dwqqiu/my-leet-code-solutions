// https://leetcode.com/problems/roman-to-integer/

// My initial thought was to compare 2 elements at 1 time, basically checking if
// curr < next. If less than, total += next - curr. Else total += curr
// But i had problems with getting the last value
class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap() {{
            put('I', 1);
            put('V', 5);
            put('X', 10);
            put('L', 50);
            put('C', 100);
            put('D', 500);
            put('M', 1000);
        }};
        
        int total = 0;
        for (int i=0; i<s.length()-1; i++) {
            int curr = map.get(s.charAt(i));
            int next = map.get(s.charAt(i+1));
            if (curr < next) total += next - curr;
            else total += curr;
        }
        return total;
    }
}

// After reading the solution, the condition check ensures that there are at least
// 2 elements to compare before subtracting
class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap() {{
            put('I', 1);
            put('V', 5);
            put('X', 10);
            put('L', 50);
            put('C', 100);
            put('D', 500);
            put('M', 1000);
        }};
        
        int total = 0;
        for (int i=0; i<s.length(); i++) {
            if (s.length()-i >= 2 && map.get(s.charAt(i)) < map.get(s.charAt(i+1))) {
                total += map.get(s.charAt(i+1)) - map.get(s.charAt(i));
                i++;
            }
            else total += map.get(s.charAt(i));
        }
        return total;
    }
}

// Actually my first solution was on the right path..
// take the curr instead of calculating curr and next together
// if curr < next, total -= curr
// else total += curr
// because the for loop will iterate each element no matter.
// finally, sum the last element during before returning the result
class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap() {{
            put('I', 1);
            put('V', 5);
            put('X', 10);
            put('L', 50);
            put('C', 100);
            put('D', 500);
            put('M', 1000);
        }};
        
        int total = 0;
        for (int i=0; i<s.length()-1; i++) {
            int curr = map.get(s.charAt(i));
            int next = map.get(s.charAt(i+1));
            if (curr < next) total -= curr;
            else total += curr;
        }
        return total+=map.get(s.charAt(s.length()-1));
    }
}